---
- name: Using a REST API
  become: false
  hosts: localhost
  vars:
    dsource_name: "testdb_mem"
    vdb_name: "vdb_mem"
    env_list:
      - "mssqllinuxtgt.xxx.co"
      - "mssqllinuxstg.xxx.co"
    stg_mssql_instance_user: "sa"
    stg_mssql_instance_password: "password"
    stg_backup_location: "/home/delphix/backup"
    stg_backup_pattern: "*.bak"
    stg_dsource_mount: "/mnt/provision/{{ dsource_name }}"
    tgt_mssql_instance_user: "sa"
    tgt_mssql_instance_password: "password"
    tgt_vdb_mount: "/mnt/provision/{{ dsource_name }}"


  gather_facts: false
  tasks:

  - name: Set session
    uri:
      url: http://mssqllinuxdlpx.xxx.co/resources/json/delphix/session
      method: POST
      body_format: json
      body:
        type: "APISession"
        version: 
          type: "APIVersion"
          major: 1
          minor: 11
          micro: 10
    register: session


  - name: Print output
    debug:
      var: session.json

  - name: Login to Delphix
    uri:
      url: http://mssqllinuxdlpx.xxx.co/resources/json/delphix/login
      method: POST
      body_format: json
      body:
        type: "LoginRequest"
        username: "admin"
        password: "delphix"
      headers:
            Cookie: "{{ session.cookies_string }}"
    register: session


  - name: Print output
    debug:
      var: session.json


  - name: list environments
    uri:
      url: http://mssqllinuxdlpx.xxx.co/resources/json/delphix/environment
      method: GET
      headers:
            Cookie: "{{ session.cookies_string }}"
    register: environments

  - name: Print current environments
    ansible.builtin.debug:
      var: environments.json.result | map(attribute='name')
       
  - name: define a list of missing env
    set_fact:
      missing_env_list: >-
        {{ 
          env_list 
            | difference(
              environments.json.result | map(attribute='name')
            ) 
        }}

  - name: adding new env - debug
    debug:
      msg: "{{ item }}"
    loop: "{{ missing_env_list }}"


  - name: adding new env
    uri:
      url: http://mssqllinuxdlpx.xxx.co/resources/json/delphix/environment
      method: POST
      body_format: json
      body:
        type: "HostEnvironmentCreateParameters"
        hostEnvironment:
          type: "UnixHostEnvironment"
          name: "{{ item }}"
        hostParameters:
          type: "UnixHostCreateParameters"
          host:
              type: "UnixHost"
              address: "{{ item }}"
              toolkitPath: "/u01/app/toolkit"
        primaryUser:
          type: "EnvironmentUser"
          name: "delphix"
          credential:
              type: "PasswordCredential"
              password: "delphix"
      headers:
            Cookie: "{{ session.cookies_string }}"
    loop: "{{ missing_env_list }}"
    register: job_output

  - name: Print output
    debug:
      var: job_output.results|json_query('[*].json.job')


  - name: wait for job
    uri:
      url: "http://mssqllinuxdlpx.xxx.co/resources/json/delphix/job/{{ item }}"
      method: GET
      headers:
            Cookie: "{{ session.cookies_string }}"
    until: job_output2|json_query('json.result.jobState') in ['SUSPENDED', 'CANCELED', 'COMPLETED', 'FAILED']
    loop: "{{ job_output.results|json_query('[*].json.job') }}"
    register: job_output2
    retries: 60
    delay: 10

  - name: Print output
    debug:
      var: job_output2


  - name: list environments
    uri:
      url: http://mssqllinuxdlpx.xxx.co/resources/json/delphix/environment
      method: GET
      headers:
            Cookie: "{{ session.cookies_string }}"
    register: environments

  - name: set_env_ids
    set_fact:
      stage_env_id: "{{ environments|json_query('json.result')|selectattr('name', 'equalto', 'mssqllinuxstg.xxx.co')|map(attribute='reference')| first }}"
      target_env_id: "{{ environments|json_query('json.result')|selectattr('name', 'equalto', 'mssqllinuxtgt.xxx.co')|map(attribute='reference')| first }}"

  - name: Print output
    debug:
      var: stage_env_id,target_env_id


  - name: get repo id 
    uri:
      url: "http://mssqllinuxdlpx.xxx.co/resources/json/delphix/repository"
      method: GET
      headers:
            Cookie: "{{ session.cookies_string }}"
    register: repos

  - name: set_repo_ids
    set_fact:
      stage_repo_id: "{{ repos|json_query('json.result')|selectattr('environment', 'equalto', stage_env_id )|selectattr('name', 'search', '^MSSQL Linux')|map(attribute='reference')| first }}"
      target_repo_id: "{{ repos|json_query('json.result')|selectattr('environment', 'equalto', target_env_id )|selectattr('name', 'search', '^MSSQL Linux')|map(attribute='reference')| first }}"

  - name: Print output
    debug:
      var: stage_repo_id, target_repo_id


  - name: list source config
    uri:
      url: http://mssqllinuxdlpx.xxx.co/resources/json/delphix/sourceconfig
      method: GET
      headers:
            Cookie: "{{ session.cookies_string }}"
    register: sourceconfigs



  - name: Print output z when
    debug:
      var: sourceconfigs
    when: sourceconfigs|json_query('json.result')|selectattr('repository', 'equalto', stage_repo_id )|selectattr('name', 'equalto', dsource_name)|length==0


  - name: adding new source config
    uri:
      url: http://mssqllinuxdlpx.xxx.co/resources/json/delphix/sourceconfig
      method: POST
      headers:
            Cookie: "{{ session.cookies_string }}"
      body_format: json
      body:
        type: "AppDataStagedSourceConfig"
        name: "{{ dsource_name }}"
        repository: "{{ stage_repo_id }}"
        parameters: 
            database_name: "{{ dsource_name }}"
    when: sourceconfigs|json_query('json.result')|selectattr('repository', 'equalto', stage_repo_id )|selectattr('name', 'equalto', dsource_name)|length==0


  - name: get source config ref id 
    uri:
      url: http://mssqllinuxdlpx.xxx.co/resources/json/delphix/sourceconfig
      method: GET
      headers:
            Cookie: "{{ session.cookies_string }}"
    register: sourceconfigs


  - name: set_source_config_id
    set_fact:
      stage_sourceconfig_id: "{{ sourceconfigs|json_query('json.result')|selectattr('repository', 'equalto', stage_repo_id )|selectattr('name', 'equalto', dsource_name)|map(attribute='reference')| first }}"

  - name: Print output 
    debug:
      var: stage_sourceconfig_id


  - name: get staging host users
    uri:
      url: "http://mssqllinuxdlpx.xxx.co/resources/json/delphix/environment/user?environment={{ stage_env_id }}"
      method: GET
      headers:
            Cookie: "{{ session.cookies_string }}"
    register: stguser

  - name: set_stage_user_ref
    set_fact:
      stage_userhost_id: "{{ stguser|json_query('json.result')|selectattr('environment', 'equalto', stage_env_id )|map(attribute='reference')| first }}"

  - name: get target host users
    uri:
      url: "http://mssqllinuxdlpx.xxx.co/resources/json/delphix/environment/user?environment={{ target_env_id }}"
      method: GET
      headers:
            Cookie: "{{ session.cookies_string }}"
    register: tgtuser

  - name: set_target_user_ref
    set_fact:
      target_userhost_id: "{{ tgtuser|json_query('json.result')|selectattr('environment', 'equalto', target_env_id )|map(attribute='reference')| first }}"


  - name: Print output 
    debug:
      var: stage_userhost_id


  - name: check if dSource exists
    uri:
      url: "http://mssqllinuxdlpx.xxx.co/resources/json/delphix/database"
      method: GET
      headers:
            Cookie: "{{ session.cookies_string }}"
    register: databases_list


  - name: ingest dSource
    uri:
      url: http://mssqllinuxdlpx.xxx.co/resources/json/delphix/database/link
      method: POST
      body_format: json
      body:
        type: "LinkParameters"
        name: "{{ dsource_name }}"
        group: "GROUP-1"
        linkData:
          type: "AppDataStagedLinkData"
          config: "{{ stage_sourceconfig_id }}"
          stagingEnvironment: "{{ stage_env_id }}"
          stagingEnvironmentUser: "{{ stage_userhost_id }}"
          environmentUser: "{{ stage_userhost_id }}"
          parameters:
            instance_user: "{{ stg_mssql_instance_user }}"
            instance_password: "{{ stg_mssql_instance_password }}"
            backup_location: "{{ stg_backup_location }}"
            backup_pattern: "{{ stg_backup_pattern }}"
            mount_path: "{{ stg_dsource_mount }}"
            for_upgrade: false
          syncParameters:
            type: "AppDataSyncParameters"
            parameters:
              resync: true
          sourcingPolicy:
            type: "SourcingPolicy"
            logsyncEnabled: false

      headers:
            Cookie: "{{ session.cookies_string }}"
    when: databases_list|json_query('json.result')|selectattr('name', 'equalto', dsource_name )|length==0
    register: job_output

  - name: Print output
    debug: 
      var: job_output
    when: job_output is not skipped

  # it has to wait at least 10 min - single job
  - name: wait for job
    uri:
      url: "http://mssqllinuxdlpx.xxx.co/resources/json/delphix/action/{{ job_output|json_query('json.action') }}"
      method: GET
      headers:
            Cookie: "{{ session.cookies_string }}"
    until: job_output2|json_query('json.result.state') in ['SUSPENDED', 'CANCELED', 'COMPLETED', 'FAILED']
    register: job_output2
    retries: 22
    delay: 30
    when: job_output is not skipped




  - name: get child action
    uri:
      url: "http://mssqllinuxdlpx.xxx.co/resources/json/delphix/action?parentAction={{ job_output|json_query('json.action') }}"
      method: GET
      headers:
            Cookie: "{{ session.cookies_string }}"
    register: child_action
    when: job_output2 is not skipped


  # - name: Print output
  #   debug:
  #     var: child_action|json_query('json.result[*].reference')| first

  # it has to wait at least 10 min - single job
  - name: wait for child job
    uri:
      url: "http://mssqllinuxdlpx.xxx.co/resources/json/delphix/action/{{ child_action|json_query('json.result[*].reference')| first }}"
      method: GET
      headers:
            Cookie: "{{ session.cookies_string }}"
    until: job_output3|json_query('json.result.state') in ['SUSPENDED', 'CANCELED', 'COMPLETED', 'FAILED']
    register: job_output3
    retries: 22
    delay: 30
    when: child_action is not skipped

  - name: check if dSource exists
    uri:
      url: "http://mssqllinuxdlpx.xxx.co/resources/json/delphix/database"
      method: GET
      headers:
            Cookie: "{{ session.cookies_string }}"
    register: databases_list

  - name: Print output
    debug:
      var: databases_list|json_query('json.result')|selectattr('name', 'equalto', dsource_name )|map(attribute='reference')| first

  - name: create VDB
    uri:
      url: http://mssqllinuxdlpx.xxx.co/resources/json/delphix/database/provision
      method: POST
      body_format: json
      body:
        type: "AppDataProvisionParameters"
        container: 
          type: "AppDataContainer"
          group: "GROUP-1"
          name: "{{ vdb_name }}"
        source: 
          type: "AppDataVirtualSource"
          name: "{{ vdb_name }}"
          parameters: 
              database_name: "{{ vdb_name }}"
              mount_path: "{{ tgt_vdb_mount }}"
              instance_user: "{{ tgt_mssql_instance_user }}"
              instance_password: "{{ tgt_mssql_instance_password }}"
          allowAutoVDBRestartOnHostReboot: false
        sourceConfig: 
            type: "AppDataDirectSourceConfig"
            name: "{{ vdb_name }}"
            repository: "{{ target_repo_id }}"
            environmentUser: "{{ target_userhost_id }}"
        timeflowPointParameters: 
            type: "TimeflowPointSemantic"
            container: "{{ databases_list|json_query('json.result')|selectattr('name', 'equalto', dsource_name )|map(attribute='reference')| first }}"
            location: "LATEST_SNAPSHOT"
          
      headers:
            Cookie: "{{ session.cookies_string }}"
    when: databases_list|json_query('json.result')|selectattr('name', 'equalto', vdb_name )|length==0
    register: job_output

  - name: Print output
    debug:
      var: job_output

  - name: wait for job
    uri:
      url: "http://mssqllinuxdlpx.xxx.co/resources/json/delphix/action/{{ job_output|json_query('json.action') }}"
      method: GET
      headers:
            Cookie: "{{ session.cookies_string }}"
    until: job_output2|json_query('json.result.state') in ['SUSPENDED', 'CANCELED', 'COMPLETED', 'FAILED']
    register: job_output2
    retries: 22
    delay: 30
    when: job_output is not skipped 

# {
#     "container": {
#         "sourcingPolicy": {
#             "logsyncEnabled": false,
#             "type": "SourcingPolicy"
#         },
#         "group": "GROUP-1",
#         "name": "vdbnorm",
#         "type": "AppDataContainer"
#     },
#     "source": {
#         "operations": {
#             "configureClone": [],
#             "preRefresh": [],
#             "postRefresh": [],
#             "preRollback": [],
#             "postRollback": [],
#             "preSnapshot": [],
#             "postSnapshot": [],
#             "preStart": [],
#             "postStart": [],
#             "preStop": [],
#             "postStop": [],
#             "type": "VirtualSourceOperations"
#         },
#         "parameters": {
#             "database_name": "vdbnorm",
#             "mount_path": "/mnt/provision/vdbnorm",
#             "instance_user": "sa",
#             "instance_password": "password"
#         },
#         "additionalMountPoints": [],
#         "allowAutoVDBRestartOnHostReboot": false,
#         "logCollectionEnabled": false,
#         "name": "vdbnorm",
#         "type": "AppDataVirtualSource"
#     },
#     "sourceConfig": {
#         "path": "",
#         "name": "vdbnorm",
#         "repository": "APPDATA_REPOSITORY-29",
#         "linkingEnabled": true,
#         "environmentUser": "HOST_USER-14",
#         "type": "AppDataDirectSourceConfig"
#     },
#     "timeflowPointParameters": {
#         "snapshot": "APPDATA_SNAPSHOT-19",
#         "type": "TimeflowPointSnapshot"
#     },
#     "masked": false,
#     "type": "AppDataProvisionParameters"
# }
